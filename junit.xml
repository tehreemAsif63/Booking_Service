<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="40" failures="0" errors="0" time="17.084">
  <testsuite name="getAllClinic" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="10.999" tests="2">
    <testcase classname="getAllClinic should return all clinics when clinics are found" name="getAllClinic should return all clinics when clinics are found" time="0.048">
    </testcase>
    <testcase classname="getAllClinic should throw Failed to find clinics" name="getAllClinic should throw Failed to find clinics" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="bookEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="11.082" tests="1">
    <testcase classname="bookEmergencySlot should throw slot not found for update" name="bookEmergencySlot should throw slot not found for update" time="0.102">
    </testcase>
  </testsuite>
  <testsuite name="deleteAllEmergencySlots" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="11.282" tests="2">
    <testcase classname="deleteAllEmergencySlots should throw Forbidden" name="deleteAllEmergencySlots should throw Forbidden" time="0.155">
    </testcase>
    <testcase classname="deleteAllEmergencySlots should throw Database already empty" name="deleteAllEmergencySlots should throw Database already empty" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="updateClinic" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="11.298" tests="3">
    <testcase classname="updateClinic should return Input missing data, All input fields are required to be filled." name="updateClinic should return Input missing data, All input fields are required to be filled." time="0.09">
    </testcase>
    <testcase classname="updateClinic should return Forbidden. Only admins can perform this action." name="updateClinic should return Forbidden. Only admins can perform this action." time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getClinicSlots" errors="0" failures="0" skipped="0" timestamp="2024-01-02T17:29:02" time="7.62" tests="1">
    <testcase classname="getClinicSlots should throw an exception for an invalid clinic ID" name="getClinicSlots should throw an exception for an invalid clinic ID" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="updateEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="11.326" tests="3">
    <testcase classname="updateEmergencySlot should return Forbidden. Only admins can perform this action." name="updateEmergencySlot should return Forbidden. Only admins can perform this action." time="0.104">
    </testcase>
    <testcase classname="updateEmergencySlot should return slot not found" name="updateEmergencySlot should return slot not found" time="0.114">
    </testcase>
    <testcase classname="updateEmergencySlot should return Failed to update slot" name="updateEmergencySlot should return Failed to update slot" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="unbookEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="11.441" tests="1">
    <testcase classname="unbookEmergencySlot should throw slot not found for update" name="unbookEmergencySlot should throw slot not found for update" time="0.092">
    </testcase>
  </testsuite>
  <testsuite name="deleteAllSlots" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:48" time="1.508" tests="2">
    <testcase classname="deleteAllSlots should throw Forbidden" name="deleteAllSlots should throw Forbidden" time="0.039">
    </testcase>
    <testcase classname="deleteAllSlots should throw Database already empty" name="deleteAllSlots should throw Database already empty" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="deleteAllClinics" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:48" time="1.67" tests="1">
    <testcase classname="deleteAllClinics should throw MessageException with code 500 for database error" name="deleteAllClinics should throw MessageException with code 500 for database error" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="getClinic" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:48" time="1.581" tests="2">
    <testcase classname="getClinic should return Not found. Clinic does not exist." name="getClinic should return Not found. Clinic does not exist." time="0.006">
    </testcase>
    <testcase classname="getClinic should return Not found. Clinic does not exists." name="getClinic should return Not found. Clinic does not exists." time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="updateSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:48" time="1.647" tests="4">
    <testcase classname="updateSlot should return Forbidden. Only admins can perform this action." name="updateSlot should return Forbidden. Only admins can perform this action." time="0.041">
    </testcase>
    <testcase classname="updateSlot should return slot not found" name="updateSlot should return slot not found" time="0.051">
    </testcase>
    <testcase classname="updateSlot should return Input missing data, All input fields are required to be filled." name="updateSlot should return Input missing data, All input fields are required to be filled." time="0.006">
    </testcase>
    <testcase classname="unbookSlot should throw forbidden action, slot belong to another dentist" name="unbookSlot should throw forbidden action, slot belong to another dentist" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:49" time="1.556" tests="2">
    <testcase classname="getSlot should return the slot if found" name="getSlot should return the slot if found" time="0.013">
    </testcase>
    <testcase classname="getSlot should throw Invalid slot ID" name="getSlot should throw Invalid slot ID" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="deleteClinic" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:49" time="1.508" tests="2">
    <testcase classname="deleteClinic should return Not found. Clinic does not exist." name="deleteClinic should return Not found. Clinic does not exist." time="0.037">
    </testcase>
    <testcase classname="unbookSlot should throw forbidden action upon request of admin" name="unbookSlot should throw forbidden action upon request of admin" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="createSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.494" tests="3">
    <testcase classname="createSlot should throw Forbidden exception if user is not a dentist" name="createSlot should throw Forbidden exception if user is not a dentist" time="0.123">
    </testcase>
    <testcase classname="createSlot should throw To be able to create a slot, you have to be assigned to a clinic" name="createSlot should throw To be able to create a slot, you have to be assigned to a clinic" time="0.004">
    </testcase>
    <testcase classname="createSlot should throw slot already exists for that time" name="createSlot should throw slot already exists for that time" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="unbookSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.849" tests="1">
    <testcase classname="unbookSlot should throw slot not found for update" name="unbookSlot should throw slot not found for update" time="0.108">
    </testcase>
  </testsuite>
  <testsuite name="deleteEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.7" tests="1">
    <testcase classname="deleteEmergencySlot should throw invalid id" name="deleteEmergencySlot should throw invalid id" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="createEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.952" tests="3">
    <testcase classname="createEmergencySlot should throw Forbidden exception if user is not a dentist" name="createEmergencySlot should throw Forbidden exception if user is not a dentist" time="0.046">
    </testcase>
    <testcase classname="createEmergencySlot should throw To be able to create a emergency slot, you have to be assigned to a clinic" name="createEmergencySlot should throw To be able to create a emergency slot, you have to be assigned to a clinic" time="0.003">
    </testcase>
    <testcase classname="createEmergencySlot should throw Emergency slot already exists for that time" name="createEmergencySlot should throw Emergency slot already exists for that time" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="deleteSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.891" tests="1">
    <testcase classname="deleteSlot should throw invalid id" name="deleteSlot should throw invalid id" time="0.061">
    </testcase>
  </testsuite>
  <testsuite name="createCLinic" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:50" time="1.967" tests="2">
    <testcase classname="createCLinic should throw Input missing, All input fields are required to be filled." name="createCLinic should throw Input missing, All input fields are required to be filled." time="0.068">
    </testcase>
    <testcase classname="createCLinic should throw Clinic already exists" name="createCLinic should throw Clinic already exists" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="bookSlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:37" time="15.396" tests="2">
    <testcase classname="bookSlot should throw slot not found for update" name="bookSlot should throw slot not found for update" time="0.652">
    </testcase>
    <testcase classname="bookSlot should throw Valid patient ID needs to be specified" name="bookSlot should throw Valid patient ID needs to be specified" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getEmergencySlot" errors="0" failures="0" skipped="0" timestamp="2023-12-13T12:57:51" time="1.115" tests="2">
    <testcase classname="getEmergencySlot should return the slot if found" name="getEmergencySlot should return the slot if found" time="0.007">
    </testcase>
    <testcase classname="getEmergencySlot should throw Invalid slot ID" name="getEmergencySlot should throw Invalid slot ID" time="0.014">
    </testcase>
  </testsuite>
</testsuites>